import NavBar from "@/components/NavBar";
import { Field } from "@/components/ui/field";
import { FileInput, FileUploadLabel, FileUploadRoot } from "@/components/ui/file-upload";
import { Toaster, toaster } from "@/components/ui/toaster";
import { useCreatePost } from "@/features/useCreatePost";
import { useDeletePost } from "@/features/useDeletePost";
import { useFetchPosts } from "@/features/useFetchPosts";
import { useUpdatePost } from "@/features/useUpdatePost";
import { Button, Container, Flex, Heading, Input, Spinner, Stack, Table } from "@chakra-ui/react"
import { useFormik } from "formik";
import Head from "next/head"
import { useEffect, useState } from "react";

export default function Home() {
  const {
    data,
    isLoading: postsIsLoading,
    refetch: refetchPosts
  } = useFetchPosts({
    onError: () => {
      toaster.create({
        title: "Terjadi Kesalahan.",
        type: "error",
      });
    }
  });

  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);


  const formik = new useFormik({
    initialValues: {
      title: "",
      price: "",
      content: "",
      image: ""
    }, onSubmit: async () => {
      const { title, price, content, image, id } = formik.values;

      if (id) {
        // Melakukan Update /posts/id
        updatePost({
          title, price: parseInt(price), content, image, id
        })
      } else {
        // Melakukan POST /posts
        createPost({
          title, price: parseInt(price), content, image
        });
      }

      formik.setFieldValue("id", "")
      formik.setFieldValue("title", "")
      formik.setFieldValue("price", "")
      formik.setFieldValue("content", "")
      formik.setFieldValue("image", "")
    }
  });

  const { mutate: createPost, isPending: createPostPending } = useCreatePost({
    onSuccess: () => {
      refetchPosts();

      toaster.create({
        title: "Post Success!",
        type: "success",
      })
    }
  });

  const { mutate: updatePost, isPending: updatePostPending } = useUpdatePost({
    onSuccess: () => {
      refetchPosts();

      toaster.create({
        title: "Post Updated!",
        type: "success",
      })
    }
  });

  const { mutate: deletePost, isPending: deletePostPending } = useDeletePost({
    onSuccess: () => {
      refetchPosts();

      toaster.create({
        title: "Post Deleted!",
        type: "info",
      });
    }
  });

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value)
  }

  const onEditClick = (product) => {
    formik.setFieldValue("id", product.id)
    formik.setFieldValue("title", product.title)
    formik.setFieldValue("price", product.price)
    formik.setFieldValue("content", product.content)
    formik.setFieldValue("image", product.image)
  }

  const confirmationDelete = (postId) => {
    const shouldDelete = confirm("Are you sure?");

    if (shouldDelete) {
      deletePost(postId);
    }
  }

  const renderPosts = () => {
    return data?.data.map((post) => {
      return (
        <Table.Row key={post.id}>
          <Table.Cell>{post.id}</Table.Cell>
          <Table.Cell>{post.title}</Table.Cell>
          <Table.Cell>$ {post.price}</Table.Cell>
          <Table.Cell>{post.content}</Table.Cell>
          <Table.Cell>{post.image}</Table.Cell>
          <Table.Cell>
            <Button colorPalette={"yellow"} mr={"3"} onClick={() => onEditClick(post)}>Edit</Button>
            {
              deletePostPending ? <Spinner /> :
                <Button colorPalette={"red"} onClick={() => confirmationDelete(post.id)}>Delete</Button>
            }
          </Table.Cell>
        </Table.Row>
      )
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <NavBar/>
        <Container>
          <Toaster />
          <Heading as={"h1"}>Helo World!</Heading>
          <Table.Root size={"sm"} mb={"3"} >
            <Table.Header>
              <Table.Row>
                <Table.ColumnHeader>ID</Table.ColumnHeader>
                <Table.ColumnHeader>TITLE</Table.ColumnHeader>
                <Table.ColumnHeader>PRICE</Table.ColumnHeader>
                <Table.ColumnHeader>CONTENT</Table.ColumnHeader>
                <Table.ColumnHeader>IMAGE</Table.ColumnHeader>
                <Table.ColumnHeader>ACTION</Table.ColumnHeader>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {renderPosts()}
              {isClient && postsIsLoading && <Spinner />}
            </Table.Body>
          </Table.Root>

          <Heading as="h3" mb={"3"}>Create Posts</Heading>

          <form onSubmit={formik.handleSubmit}>
            <Stack gap={"4"} mb={"3"} align={"center"} >
              <Field label="Post Id">
                <Input placeholder="Id Post" onChange={handleFormInput} name="id" value={formik.values.id}></Input>
              </Field>
              <Field label="Title">
                <Input placeholder="Title Post" onChange={handleFormInput} name="title" value={formik.values.title}></Input>
              </Field>
              <Field label="Price">
                <Input placeholder="Price Post" onChange={handleFormInput} name="price" value={formik.values.price}></Input>
              </Field>
              <Field label="Content">
                <Input placeholder="Content Post" onChange={handleFormInput} name="content" value={formik.values.content}></Input>
              </Field>
             <FileUploadRoot>
              <FileUploadLabel>
                <FileInput name="image">Upload Image</FileInput>
              </FileUploadLabel>
             </FileUploadRoot>
            </Stack >

            <Flex justify={"center"}>
              {createPostPending || updatePostPending ? (
                <Spinner mb={"5"} />
              ) : (
                <Button variant={"subtle"} type="submit" mb={"5"}>Submit Post</Button>
              )}
            </Flex>
          </form>
        </Container>
      </main>
    </>
  )
}
