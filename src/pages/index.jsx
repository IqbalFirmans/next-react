import { Field } from "@/components/ui/field";
import { Toaster, toaster } from "@/components/ui/toaster";
import { useCreateProduct } from "@/features/useCreateProduct";
import { useFetchPosts } from "@/features/useFetchPosts";
import { axiosInstance } from "@/lib/axios";
import { Button, Container, Flex, Heading, Input, Spinner, Stack, Table, Text } from "@chakra-ui/react"
import { useMutation } from "@tanstack/react-query";
import { useFormik } from "formik";
import Head from "next/head"

export default function Home() {
  const { data,
    isLoading: postsIsLoading,
    refetch: refetchPosts
  } = useFetchPosts();

  const formik = new useFormik({
    initialValues: {
      title: "",
      price: "",
      content: "",
      image: ""
    }, onSubmit: async () => {
      const { title, price, content, image } = formik.values;
      // Melakukan POST /posts
      createProduct({
        title, price: parseInt(price), content, image
      });

      formik.setFieldValue("title", "")
      formik.setFieldValue("price", "")
      formik.setFieldValue("content", "")
      formik.setFieldValue("image", "")
    }
  });

  const { mutate: createProduct, isPending: createProductsPending } = useCreateProduct({
    onSuccess: () => {
      refetchPosts();

      toaster.create({
        title: "Post Success!",
        type: "success",
      })
    }
  });

  const { mutate: deletePost, isPending: deletePostPending } = useMutation({
    mutationFn: async (id) => {
      const postResponse = await axiosInstance.delete(`/posts/${id}`);

      return postResponse;
    },
    onSuccess: () => {
      refetchPosts();


      toaster.create({
        title: "Post Deleted!",
        type: "info",

      })
    }
  });

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value)
  }

  const renderPosts = () => {
    return data?.data.map((post) => {
      return (
        <Table.Row key={post.id}>
          <Table.Cell>{post.id}</Table.Cell>
          <Table.Cell>{post.title}</Table.Cell>
          <Table.Cell>$ {post.price}</Table.Cell>
          <Table.Cell>{post.content}</Table.Cell>
          <Table.Cell>{post.image}</Table.Cell>
          <Table.Cell>
            {
              deletePostPending ? <Spinner /> :
                <Button colorPalette={"red"} onClick={() => deletePost(post.id)}>Delete {post.id}</Button>
            }
          </Table.Cell>
        </Table.Row>
      )
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Toaster />
          <Heading as={"h1"}>Helo World!</Heading>
          <Table.Root size={"sm"} mb={"3"} >
            <Table.Header>
              <Table.Row>
                <Table.ColumnHeader>ID</Table.ColumnHeader>
                <Table.ColumnHeader>TITLE</Table.ColumnHeader>
                <Table.ColumnHeader>PRICE</Table.ColumnHeader>
                <Table.ColumnHeader>CONTENT</Table.ColumnHeader>
                <Table.ColumnHeader>IMAGE</Table.ColumnHeader>
                <Table.ColumnHeader>ACTION</Table.ColumnHeader>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {renderPosts()}
              {postsIsLoading && <Spinner />}
            </Table.Body>
          </Table.Root>

          <Heading as="h3" mb={"3"}>Create Posts</Heading>

          <form onSubmit={formik.handleSubmit}>
            <Stack gap={"4"} mb={"3"} align={"center"} >
              <Field label="Title">
                <Input placeholder="Title Post" onChange={handleFormInput} name="title" value={formik.values.title}></Input>
              </Field>
              <Field label="Price">
                <Input placeholder="Price Post" onChange={handleFormInput} name="price" value={formik.values.price}></Input>
              </Field>
              <Field label="Content">
                <Input placeholder="Content Post" onChange={handleFormInput} name="content" value={formik.values.content}></Input>
              </Field>
              <Field label="Image">
                <Input placeholder="Image Post" onChange={handleFormInput} name="image" value={formik.values.image}></Input>
              </Field>
            </Stack >

            <Flex justify={"center"}>
              {createProductsPending ? (
                <Spinner mb={"5"} />
              ) : (
                <Button variant={"subtle"} type="submit" mb={"5"}>Submit Post</Button>
              )}
            </Flex>
          </form>
        </Container>
      </main>
    </>
  )
}
